#!/bin/bash

set -e

usage() {
        echo "Welcome to MitoComp. Your are using Git commit: $commit"
        echo
        echo "Usage: $0 [-v] [-t <submission_system>] [-c <cluster_config_file>] [-s <snakemke_args>]"
        echo
        echo "Options:"
        echo "  -t <submission_system> Specify available submission system. Options: sge, slurm, torque, serial (no submission system)."
	echo "  -c <cluster_config_file> Path to cluster config file in YAML format (mandatory). "
	echo "  -m <runmode> Determine how far the pipeline should run. Options: assembly, annotate, all. Default: all"
        echo "  -s <snakemake_args> Additional arguments passed on to the snakemake command (optional)."
        echo "  -i \"<singularity_args>\" Additional arguments passed on to singularity (optional)."
	echo
	echo "  --dry Invokes a dry-run. Corresponds to: snakemake -n"
	echo "  --reset. Use this option to cancel all remaining jobs from this snakemake command without cancelling other cluster jobs. This is useful if any jobs fail to produce the desired output."
	#echo "  --report This creates an overview report of the run."
	#echo "  --setup Will download the genomes and prepare the pipeline to run."
	#echo "  --remove Resets the pipeline. Will delete all results, logs and checkpoints."
	echo
        1>&2; exit 1; }

version() {
        echo "$0 Git commit: $commit"
        exit 0
}
CLUSTER=""
CLUSTER_CONFIg=""
SETUP=""
REPORT=""
DRY=""
RESET="FALSE"
RUNMODE="all"
NJOBS="10001"
commit=$(git rev-parse --short HEAD)
STDSMARGS="--notemp --latency-wait 60"

while getopts ":vt:c:s:m:i:-:" option;
        do
                case "${option}"
                in
                        v) version;;
                        t) CLUSTER=${OPTARG};;
                        c) CLUSTER_CONFIG=${OPTARG};;
                        s) SM_ARGS=${OPTARG};;
                        i) SI_ARGS=${OPTARG};;
                        m) RUNMODE=${OPTARG};;
			-) LONG_OPTARG="${OPTARG#*}"
				case $OPTARG in
					add-genomes) ADD="TRUE";;
					setup) SETUP="TRUE" ;;
					remove) REMOVE="TRUE" ;;
					report) REPORT="TRUE" ;;
					dry) DRY="-n" ;;
					reset) RESET="TRUE" ;;
					'' ) break ;;
					*) echo "Illegal option --$OPTARG" >&2; usage; exit 2 ;;
				esac ;;	
                        *) echo "Illegal option --$OPTARG" >&2; usage;;
                        ?) echo "Illegal option --$OPTARG" >&2 usage;;
                esac
        done
export $RUNMODE

#SM_ARGS="--quiet"
if [ $OPTIND -eq 1 ]; then usage; fi

# make sure these directories exist before submission because they are needed as singularity bind points
if [[ ! -d .usr_tmp ]]; then mkdir .usr_tmp; fi 
if [[ ! -d .conda_pkg_tmp ]]; then mkdir .conda_pkg_tmp; fi
if [[ $RESET == "TRUE" ]]; then
        set +e
	if [[ $CLUSTER == "slurm" ]]; then
		grep -o -P 'batch job\K.[0-9]{1,8}' log/submission.txt > log/sub_ids.txt
		cat log/sub_ids.txt | while read line; do scancel $line; done
	elif [[ $CLUSTER == "sge" ]]; then
		grep "^Submitted job" log/submission.txt | awk '{print $9}' > log/sub_ids.txt
                for jobid in $(cat log/sub_ids.txt); do qdel $jobid; done
	elif [[ $CLUSTER == "torque" ]]; then
		grep "^Submitted job" log/submission.txt | awk '{print $9}' > log/sub_ids.txt
                for jobid in $(cat log/sub_ids.txt); do qdel $jobid; done
	else
                echo "reset not valid for serial submission"
	fi
exit 0
fi
#echo $RESET
export RUNMODE
if [[ $RUNMODE == "assembly" ]]; then
	if [[ $CLUSTER == "slurm" ]]; then
	          export CONDA_PKGS_DIRS="$(pwd)/.conda_pkg_tmp"
	          mkdir -p .conda_pkg_tmp
	          snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --cluster-config $CLUSTER_CONFIG --until assembly_only --cluster '$(pwd)/bin/immediate_submit/immediate_submit.py {dependencies} slurm' --immediate-submit $STDSMARGS $SM_ARGS $DRY 2>&1 | tee log/submission.txt
	        unset CONDA_PKGS_DIRS
	  elif [[ $CLUSTER == "sge" ]]; then
	        snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --cluster-config $CLUSTER_CONFIG --until assembly_only --cluster "$(pwd)/bin/immediate_submit/immediate_submit.py '{dependencies}' sge" --immediate-submit $STDSMARGS $SM_ARGS $DRY 2>&1 | tee log/submission.txt
	  elif [[ $CLUSTER == "torque" ]]; then
	        snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --cluster-config $CLUSTER_CONFIG --until assembly_only --cluster "$(pwd)/bin/immediate_submit/immediate_submit.py '{dependencies}' torque" --immediate-submit $STDSMARGS $SM_ARGS $DRY 2>&1 | tee log/submission.txt
	  elif [[ $CLUSTER == "serial" ]]; then
	    snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --until assembly_only $STDSMARGS $SM_ARGS $DRY 
	  else
	          echo "Submission system not recognized"
	          exit 1
	  fi
elif [[ $RUNMODE == "annotate" ]]; then
	if [[ $CLUSTER == "slurm" ]]; then
	          export CONDA_PKGS_DIRS="$(pwd)/.conda_pkg_tmp"
	          mkdir -p .conda_pkg_tmp
	          snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --cluster-config $CLUSTER_CONFIG --cluster '$(pwd)/bin/immediate_submit/immediate_submit.py {dependencies} slurm' --immediate-submit $STDSMARGS $SM_ARGS $DRY 2>&1 | tee log/submission.txt
	        unset CONDA_PKGS_DIRS
	  elif [[ $CLUSTER == "sge" ]]; then
	        snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --cluster-config $CLUSTER_CONFIG --cluster "$(pwd)/bin/immediate_submit/immediate_submit.py '{dependencies}' sge" --immediate-submit $STDSMARGS $SM_ARGS $DRY 2>&1 | tee log/submission.txt
	  elif [[ $CLUSTER == "torque" ]]; then
	        snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --cluster-config $CLUSTER_CONFIG --cluster "$(pwd)/bin/immediate_submit/immediate_submit.py '{dependencies}' torque" --immediate-submit $STDSMARGS $SM_ARGS $DRY 2>&1 | tee log/submission.txt
	  elif [[ $CLUSTER == "serial" ]]; then
	    snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" $STDSMARGS $SM_ARGS $DRY
	  else
	          echo "Submission system not recognized"
	          exit 1
	  fi
elif [[ $RUNMODE == "all" ]]; then
        if [[ $CLUSTER == "slurm" ]]; then
                  export CONDA_PKGS_DIRS="$(pwd)/.conda_pkg_tmp"
                  mkdir -p .conda_pkg_tmp
                  snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --cluster-config $CLUSTER_CONFIG --cluster '$(pwd)/bin/immediate_submit/immediate_submit.py {dependencies} slurm' --immediate-submit $STDSMARGS $SM_ARGS $DRY 2>&1 | tee log/submission.txt
                unset CONDA_PKGS_DIRS
          elif [[ $CLUSTER == "sge" ]]; then
                snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --cluster-config $CLUSTER_CONFIG --cluster "$(pwd)/bin/immediate_submit/immediate_submit.py '{dependencies}' sge" --immediate-submit $STDSMARGS $SM_ARGS $DRY 2>&1 | tee log/submission.txt
          elif [[ $CLUSTER == "torque" ]]; then
                snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --cluster-config $CLUSTER_CONFIG --cluster "$(pwd)/bin/immediate_submit/immediate_submit.py '{dependencies}' torque" --immediate-submit $STDSMARGS $SM_ARGS $DRY 2>&1 | tee log/submission.txt
          elif [[ $CLUSTER == "serial" ]]; then
            snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" $STDSMARGS $SM_ARGS $DRY
          else
                  echo "Submission system not recognized"
                  exit 1
          fi
else
	echo "Runmode not recognized: "$RUNMODE
	exit 1
fi
